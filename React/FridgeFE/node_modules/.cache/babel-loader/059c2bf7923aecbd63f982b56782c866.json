{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/Desktop/Fridge/React/FridgeFE/src/Results.js\";\nimport React from 'react';\nimport { Item, Message, Header } from 'semantic-ui-react';\nimport './CSS/Results.css';\nimport loader from './Assets/loader.gif';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callApi = async () => {\n      const ingredients = this.state.ingredients;\n      const ingredientsString = ingredients.join(',');\n      const query = 'http://localhost:9000/?query='.concat(ingredientsString);\n      const response = await fetch(query);\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    const {\n      ingredients: _ingredients\n    } = this.props;\n    this.state = {\n      ingredients: _ingredients,\n      response: []\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    const {\n      ingredients\n    } = props;\n    this.setState({\n      ingredients\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.ingredients !== this.state.ingredients) {\n      this.callApi().then(res => this.setState({\n        response: res\n      })).catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    const {\n      ingredients,\n      response\n    } = this.state;\n\n    if (response) {\n      return /*#__PURE__*/_jsxDEV(Message, {\n        color: \"orange\",\n        children: [/*#__PURE__*/_jsxDEV(Message.Header, {\n          children: \"\\uC7AC\\uB8CC\\uAC00 \\uBD80\\uC871\\uD55C\\uAC70\\uAC19\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this); //    if (response.Recipes.length !== 0) {\n      //        return (\n      //         <div>\n      //         <Header as='h3' textAlign='center'>이건 어때?</Header>\n      //        <Item.Group id='resultsList'>\n      //            {response.Recipes.map(recipe => (\n      //            <Item id='recipe' href={recipe.link}>\n      //                 <Item.Image size='tiny' src={recipe.thumbnail} />\n      //                 <Item.Content>\n      //                     <Item.Header> {recipe.title} </Item.Header>\n      //                     <Item.Description> <p> {recipe.ingredients} </p> </Item.Description>\n      //                 </Item.Content>\n      //             </Item>\n      //            ))}\n      //        </Item.Group>\n      //        </div>\n      //        )\n      //    } else {\n      //        return (\n      //         <Message color='orange'>\n      //         <Message.Header>재료가 부족한거같요!</Message.Header>\n      //         <p>\n      //         </p>\n      //       </Message>\n      //        )\n      //    }\n    } else if (ingredients.length !== 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loader,\n          alt: \"loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nexport default Results;","map":{"version":3,"sources":["/Users/user/Desktop/Fridge/React/FridgeFE/src/Results.js"],"names":["React","Item","Message","Header","loader","Results","Component","constructor","props","callApi","ingredients","state","ingredientsString","join","query","concat","response","fetch","body","json","status","Error","message","componentWillReceiveProps","setState","componentDidUpdate","prevProps","prevState","then","res","catch","err","console","log","render","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,QAAsC,mBAAtC;AACA,OAAO,mBAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAsBnBC,OAtBmB,GAsBT,YAAY;AAClB,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWD,WAA/B;AACA,YAAME,iBAAiB,GAAGF,WAAW,CAACG,IAAZ,CAAiB,GAAjB,CAA1B;AACA,YAAMC,KAAK,GAAG,gCAAgCC,MAAhC,CAAuCH,iBAAvC,CAAd;AAEA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,KAAD,CAA5B;AACA,YAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B,MAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AAE7B,aAAOJ,IAAP;AACD,KAhCgB;;AAEf,UAAM;AAAER,MAAAA,WAAW,EAAXA;AAAF,QAAkB,KAAKF,KAA7B;AACA,SAAKG,KAAL,GAAa;AACTD,MAAAA,WAAW,EAAXA,YADS;AAETM,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIH;;AAEDO,EAAAA,yBAAyB,CAACf,KAAD,EAAQ;AAC7B,UAAM;AAAEE,MAAAA;AAAF,QAAkBF,KAAxB;AACA,SAAKgB,QAAL,CAAc;AAAEd,MAAAA;AAAF,KAAd;AACD;;AAEHe,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAIA,SAAS,CAACjB,WAAV,KAAyB,KAAKC,KAAL,CAAWD,WAAxC,EAAqD;AACjD,WAAKD,OAAL,GACCmB,IADD,CACMC,GAAG,IAAI,KAAKL,QAAL,CAAc;AAAER,QAAAA,QAAQ,EAAEa;AAAZ,OAAd,CADb,EAECC,KAFD,CAEOC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFd;AAGH;AACJ;;AAcDG,EAAAA,MAAM,GAAG;AACN,UAAM;AAACxB,MAAAA,WAAD;AAAcM,MAAAA;AAAd,QAA0B,KAAKL,KAArC;;AAEA,QAAIK,QAAJ,EAAc;AACb,0BACI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,QAAf;AAAA,gCACA,QAAC,OAAD,CAAS,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADa,CASb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,KArCD,MAqCO,IAAIN,WAAW,CAACyB,MAAZ,KAAuB,CAA3B,EAA6B;AAChC,0BACA;AAAA,+BAAK;AAAK,UAAA,GAAG,EAAE/B,MAAV;AAAkB,UAAA,GAAG,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cADA;AAGH,KAJM,MAIA;AACN,0BACI;AAAA;AAAA;AAAA;AAAA,cADJ;AAGA;AACH;;AApFiC;;AAwFtC,eAAeC,OAAf","sourcesContent":["import React from 'react';\nimport { Item, Message, Header } from 'semantic-ui-react';\nimport './CSS/Results.css';\nimport loader from './Assets/loader.gif';\n\nclass Results extends React.Component {\n    constructor(props) {\n        super(props);\n        const { ingredients } = this.props;\n        this.state = {\n            ingredients,\n            response: [],\n        };\n    }\n\n    componentWillReceiveProps(props) {\n        const { ingredients } = props;\n        this.setState({ ingredients });\n      }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.ingredients!== this.state.ingredients) {\n            this.callApi()\n            .then(res => this.setState({ response: res }))\n            .catch(err => console.log(err));\n        }\n    }\n\n    callApi = async () => {\n        const ingredients = this.state.ingredients\n        const ingredientsString = ingredients.join(',')\n        const query = 'http://localhost:9000/?query='.concat(ingredientsString)\n        \n        const response = await fetch(query);\n        const body = await response.json();\n        if (response.status !== 200) throw Error(body.message);\n        \n        return body;\n      };\n\n    render() {\n       const {ingredients, response} = this.state\n       \n       if (response) {\n        return (\n            <Message color='orange'>\n            <Message.Header>재료가 부족한거같요!</Message.Header>\n            <p>\n              \n            </p>\n          </Message>\n           )\n        //    if (response.Recipes.length !== 0) {\n        //        return (\n        //         <div>\n        //         <Header as='h3' textAlign='center'>이건 어때?</Header>\n        //        <Item.Group id='resultsList'>\n        //            {response.Recipes.map(recipe => (\n        //            <Item id='recipe' href={recipe.link}>\n        //                 <Item.Image size='tiny' src={recipe.thumbnail} />\n    \n        //                 <Item.Content>\n        //                     <Item.Header> {recipe.title} </Item.Header>\n        //                     <Item.Description> <p> {recipe.ingredients} </p> </Item.Description>\n        //                 </Item.Content>\n        //             </Item>\n        //            ))}\n        //        </Item.Group>\n        //        </div>\n        //        )\n        //    } else {\n        //        return (\n        //         <Message color='orange'>\n        //         <Message.Header>재료가 부족한거같요!</Message.Header>\n        //         <p>\n                  \n        //         </p>\n        //       </Message>\n        //        )\n        //    }\n       } else if (ingredients.length !== 0){\n           return(\n           <div><img src={loader} alt=\"loading...\" /></div>\n           )\n       } else {\n        return(\n            <div></div>\n            )\n       }\n    }\n}\n\n\nexport default Results;"]},"metadata":{},"sourceType":"module"}